<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd
">
    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache1.xml" />
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher" class="com.hfxt.web.utils.RetryLimitHashedCredentialsMatcher">
        <constructor-arg name="cacheManager" ref="cacheManager" />
        <property name="hashAlgorithmName" value="md5" />
        <property name="hashIterations" value="3" />
        <property name="storedCredentialsHexEncoded" value="true" />
    </bean>

    <!-- Realm实现 -->
    <bean id="userRealm" class="com.hfxt.web.utils.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"></property>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm" />
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!--        实现login() 处理的核心: -->
        <property name="securityManager" ref="securityManager" />

        <property name="loginUrl" value="/login.jsp" />
        <property name="unauthorizedUrl" value="/unauth.jsp" />
        <property name="filterChainDefinitions">
            <value>
                <!-- 第一个用户必须有admin权限,
                    例如: /student/add_student = roles[admin,user] 注:需要roles过滤器实现权限检查.是否具有admin/user权限.

                     第二个用户必须登录才能访问
                     例如:/index.jsp = authc

                     第三个其他所有路径任何人都可以访问。
                -->
                /login.jsp = anon
                /user/login.do = anon
                /css/* = anon
                /js/* = anon
                /laydate/* = anon
                /img/* = anon
                /common/* = anon
                /user/edit.do = authc
                /user/logout.do = authc
                /billAdd.jsp = authc,roleFilter[admin,leader]
                /providerAdd.jsp = authc,roleFilter[admin]
                /userAdd.jsp = authc,roleFilter[admin]
                /bill/getAll.do = authc,roleFilter[admin,leader,emplyer]
                /provider/getAll.do = authc,roleFilter[admin,leader,emplyer]
                /bill/get/* = authc,roleFilter[admin,leader,emplyer]
                /provider/get/* = authc,roleFilter[admin,leader,emplyer]
                /user/getAll.do = authc,roleFilter[admin,leader]
                /user/get/* = authc,roleFilter[admin,leader]
                /user/** = authc,roleFilter[admin]
                /bill/** = authc,roleFilter[admin,leader]
                /provider/** = authc,roleFilter[admin]
                /** = authc
            </value>
        </property>
    </bean>
    <bean id="roleFilter" class="com.hfxt.web.utils.PermissionFilter"></bean>

    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

</beans>
